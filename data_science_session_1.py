# -*- coding: utf-8 -*-
"""Data science session 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xBZV8MiSBwrENqyuzq5-gOfNqkBXelT6
"""

list = [1,2,3,4,5]
list[2]

list1 = [1,2,3,4,5]
list2 = [1,2,3,4,5]
print(list1+list2) #concataination

"""#addition of 2 vectors"""

def add_vector(l1 , l2):
  new_list = []
  assert len(l1) == len(l2)
  for i in range(len(l1)):
    new_list.append(l1[i] +l2[i])
  return new_list

add_vector(list1 , list2)

x = "hello"
assert x == "hello" # lw 8lt btdrb error

"""#another way with zip function"""

def add_vector(l1 , l2):
  new_list = []
  assert len(l1) == len(l2)
  for i,v in zip(l1 , l2):
    new_list.append(i+v)
  return new_list

"""#multiply scaler with vector"""

def scaler_fun(scaler , vec):
  new_list= []
  for i in vec:
    new_list.append(scaler * i)
  return new_list

l = [1,3,4,5,6]
scaler = 2
res = scaler_fun(scaler , l)
print(res)

"""#another way"""

def scaler_vector(scaler , vector):
  return[scaler*i for i in vector]

l = [1,3,4,5,6]
scaler = 2
res = scaler_vector(scaler , l)
print(res)

"""#multiply 2 vectors"""

def mult_two_vect(v1 , v2):
  res = 0
  for i , v in zip(v1,v2):
    res = res + i * v
  return res

mult_two_vect(list1 , list2)

"""- [(1,2,3)   A
-   (4,5,6)
-   (7,8,9) ]
#shape of the matrix
- len(A) --->number of rows
- len(0) --->number of coulumns

#find the shape of matrix
"""

def matrix_shape(matrix):
  rows = len(matrix)
  cols = len(matrix[0])
  return  f'{rows}*{cols}'

matrix = [ [1,2,3] ,
            [4,5,6],
            [7,8,9]]
matrix_shape(matrix)

"""# add 2 matrices"""

def add_matrix(A,B):
  assert len(A) == len(B)
  assert len(A[0]) == len(B[0])
  col_list = []
  for i in range(len(A)):
    row_list = []
    for j in range(len(A[0])):
      row_list.append(A[i][j]+B[i][j])
    col_list.append(row_list)
  return col_list

matrix1 = [ [1,2,3],[4,5,6]]
matrix2 = [ [1,2,3] ,[4,5,6]]
add_matrix(matrix1, matrix2)

"""#multiply Scaler with matrix"""

def scaler_multply(s, Matrix):
  return [s*i for i in Matrix]

def matrix_malt(scaler , matr):
  new_list = []
  for i in range (len(matr)):
    new_list.append(scaler_multply(scaler,matr[i]))
  return new_list

scaler = 2
A = [[1,2,3] , [1,2,3]]
Res = matrix_malt(scaler,A)
print(Res)

"""#matrix multiplication (element wise)"""

def multiply_2_matrices(A,B):
  assert len(A) == len(B)
  assert len(A[0]) == len(B[0])
  col_list = []
  for i in range(len(A)):
    row_list = []
    for j in range(len(A[0])):
      row_list.append(A[i][j]*B[i][j])
    col_list.append(row_list)
  return col_list

matrix1 = [ [1,2,3],[4,5,6]]
matrix2 = [ [1,2,3] ,[4,5,6]]
multiply_2_matrices(matrix1, matrix2)

"""#apply matrix dot product"""

