# -*- coding: utf-8 -*-
"""scipy / Tensors (session 3)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dPbjj64XsnqMyXIC511g-h9bbjlAmSLZ

#SCIPY VS NUMPY
- numpy writen with (C)  SCIPY writen in (python)
- so numpy is faster but scipy more functional because it calculate sparse matrix
"""

import numpy as np
from scipy.sparse import csr_matrix,csc_matrix

"""#comprssed sparse row"""

arr = np.array([[1,0,2],
               [2,1,0],
                [0,1,3]])

sparse_mat = csr_matrix(arr)
print(sparse_mat)

"""#compressed sparse column"""

CSC_mat = csc_matrix(arr)
print(CSC_mat)

"""#calculate sparse"""

def sparse(mat):
  sparse_res = 1-np.count_nonzero(mat) / mat.size
  return sparse_res

arr = np.array([[1,0,2],
               [2,1,0],
                [0,1,3]])
print(sparse(arr))

"""#**Tensors**
- matrix of matrices or list of lists
- 3D (depth , width , height)
- imutable
"""

T1 = np.array([
    [[1,2,3],[4,5,6],[7,8,9]],
    [[10,11,12],[13,14,15],[16,17,18]],
    [[19,20,21],[22,23,24],[25,26,27]]
])

T2 = np.array([
    [[1,2,3],[4,5,6],[7,8,9]],
    [[10,11,12],[13,14,15],[16,17,18]],
    [[19,20,21],[22,23,24],[25,26,27]]
])
T1.shape

"""#Arithmetic tensor"""

add = T1+ T2
add

suntract = T1 - T2
suntract

#element wise multiplication
multiplication = T1 * T2
multiplication

# dot product multiplication
mult = np.tensordot(T1,T2)
mult

mult = np.tensordot(T1,T2, axes = 0) #axes = 0 tensor product
mult

mult = np.tensordot(T1,T2, axes = 1) # axes = 1 tensordot product
mult

"""#**matrix factorization / matrix decomposition**
bnfok al matrix kza 7aga 3shan yb2a shklha ashal w ta5od computation 22l and P for purmutation
- LUQLPU
- QR
- EIGEN

#LPU  
(lower triangular matrix / upper triangular matrix)
-permutation
- work with square matrix
"""

arr = np.array([[1,2,3],
                [4,5,6],
                [7,8,9]]) # split the array to L & U

from scipy.linalg import lu

p,l,u = lu(arr)
print(p)
print("--------------")
print(l)
print("--------------")
print(u)

"""- A = LU
if p*L*U = A
"""

B =  p.dot(l).dot(u)
B

"""#QR
- matrix can be square or not
- matrix * upper matrix
"""

arr = np.array([[1,2],
                [3,4],
                [5,6]])
q, r = np.linalg.qr(arr ,)
print(q)
print("--------------")
print(r)

arr = np.array([[1,2],
                [3,4],
                [5,6]])
q, r = np.linalg.qr(arr ,'complete')
print(q)
print("--------------")
print(r)

"""#Eigen
- A*V = lamda * v
- lamda =aigen value , v = eigen vector
- A = lamda * V * V^(-1)
"""

arr = np.array([[1,2,3],
                [4,5,6],
                [7,8,9]])
values , vector = np.linalg.eig(arr)
print(values)
print("--------------")
print(vector)

vector[:,0]

B = arr.dot(vector[:,0])
c = vector[:,0]*values[0]
print(B)
print('--------')
print(c)

Q = vector
R = np.linalg.inv(Q)
L = np.diag(values) # put lamdbda values diagonal matrix (lamda)
#A = vector*lamda*inverse(Vectore)  #(construction)
A = Q.dot(L).dot(R)
A

"""#**task**
- create function:
def compose(matrix , LU  ,QR ,Eigen)

#session 4

#**measures of central tendancy**
"""

#mean
arr = np.array([1,2,2,3,4,5,6,7])
np.mean(arr)

#median
np.median(arr)

#mod not avialble on numpy
from statistics import mode
mode(arr)

array = np.array([[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]])
print(np.mean(array)) # summation of the matrix / n
print("------------------")
print(np.mean(array , axis = 0))
print("------------------")
print(np.mean(array , axis = 1))

"""#**Measure of disperssion**"""

#variance
array = np.array([1,2,3,4,5,6])
np.var(array)

#variance of matrix
array = np.array([[1,2,3,4,5,6] , [1,2,3,4,5,6] ])
print(np.var(array))
print(np.var(array , axis =0))
print(np.var(array , axis = 1))

#standard deviation
array = np.array([1,2,3,4,5,6])
np.std(array)

#variance of matrix
array = np.array([[1,2,3,4,5,6] , [1,2,3,4,5,6] ])
print(np.std(array))
print(np.std(array , axis =0))
print(np.std(array , axis = 1))

"""#def measure(matrix , 0 , 1) :
calculate mean of matrix
axis = 0
axix =1
standard deviation
"""

def measures(matrix , axis):
  x= np.mean(matrix)
  y = np.mean(matrix,axis=axis)
  z = np.std(matrix)
  k = np.std(matrix , axis=axis)
  return x , y ,z , k

array = np.array([[1,3,5,6],[7,8,9,10]])
measures(array , 1)

"""#covariance"""

x = np.array([1,2,3,4,5,7,8,9])